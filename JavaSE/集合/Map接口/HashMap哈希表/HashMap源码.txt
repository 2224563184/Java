
构造器:
 public HashSet() {
        map = new HashMap<>();
    }		

add():

public boolean add(E e) {
        return map.put(e, PRESENT)==null;
    }


         

public V put(K key, V value) {                  
  return putVal(hash(key), key, value, false, true);  该方法会执行  hash(key),返回Key的哈希值   算法=  哈希值^哈希值>>>16
    }




final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                   boolean evict) {

        Node<K,V>[] tab; 
        Node<K,V>     p; 
        int           n, i;    定义辅助变量

        if ((tab = table) == null || (n = tab.length) == 0)
            n = (tab = resize()).length;

// table就是 HashMap的一个数组,类型是Node[]
//if语句表示如果当前 table是nuLL,或者大小=0
//就是第一次扩容,到16个空间

        if ((p = tab[i = (n - 1) & hash]) == null)

/(1)根据key,得到hash去计算该key应该存放到 table表的哪个索引位置
//并把这个位置的对象,赋给p
//(2)判断p是否为nuLL
/(2.1)如果p为nuuL,表示还没有存放元素,就创建一个Node(key="java" value= PRESENT
//(2.2)就放在该位置tab[i]= newNode(hash,key, value,nuLL            tab[i] = newNode(hash, key, value, null);

        else {
            Node<K,V> e; K k;
            if (p.hash == hash &&
                ((k = p.key) == key || (key != null && key.equals(k))))
                e = p;

//一个开发技巧提示:在需要局部变量(辅助变量)时候,在创建 Node<k, V> e, Kk://
//如果当前索引位置对应的链表的第一个元素和准备添加的key的hash值一样
//并且满足下面两个条件之一
/(1)准备加入的key和p指向的Node结点的key是同一个对象
//(2)p指向的Node结点的key的 equaLs()和准备加入的key比较后相同//就不能加入

            else if (p instanceof TreeNode)
                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);

        //再判断p是不是一颗红黑树
        //如果是一颗红黑树,就调用 putTreevat,来进行添加else if (p instanceof TreeNode)

            else {
                for (int binCount = 0; ; ++binCount) {
                    if ((e = p.next) == null) {
                        p.next = newNode(hash, key, value, null);
                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st
                            treeifyBin(tab, hash);

  //如果 table对应索引位置,已经是一个链表,就使用for循环比较
  //(1)依次和该链表的每一个元素比较后,都不相同,则加入到该链表的最后//注意在把元素添加到链表后,立即判断该链表是否已经达到8个结点
  /,就调用 treeifyBin()对当前这个链表进行树化(转成红黑树/注意,在转成红黑树时,要进行判断,判断条件
  /如果上面条件成立,先 table扩容
  只有上面条件不成立时,才进行转成红黑树
  (2)依次和该链表的每一个元素比较过程中,如果有相同情况,就直接 break

                        break;
                    }
                    if (e.hash == hash &&
                        ((k = e.key) == key || (key != null && key.equals(k))))
                        break;
                    p = e;
                }
            }
            if (e != null) { // existing mapping for key
                V oldValue = e.value;
                if (!onlyIfAbsent || oldValue == null)
                    e.value = value;
                afterNodeAccess(e);
                return oldValue;
            }
        }
        ++modCount;
        if (++size > threshold)
//size就是我们每加入一个结点Node(k,vh,next),size+

            resize();
        afterNodeInsertion(evict);
        return null;
    }
