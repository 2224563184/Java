package OOP.多态.抽象;

public class Demo {
    public  static void main(String[] args) {
        父类  F=new 子类();
        F.eat();

    }
}

/*
*     多态向上转型：
*
*                 成员变量：编译看左边,执行看左边
*                 成员方法：编译看左边，执行看右边
*
*                 左边没有，右边有则无法运行；
*                  左边有，右边没有就直接继承；
*                  左边有，右边相同则方法重写；
*
*   抽象类：
*         抽象类和抽象方法必须要有 abstract
*         抽象类不一定有抽象方法，抽象方法一定是抽象类。
*
* */